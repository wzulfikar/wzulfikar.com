[
    {
        "objectID": "/id/about/",
        "type": "PAGE",
        "title": "About",
        "summary": "",
        "body": "Rakyat biasa. Tertarik dengan teknologi dan komunikasi."
    },
    {
        "objectID": "/about/",
        "type": "PAGE",
        "title": "About",
        "summary": "",
        "body": "Just a random dude writing on the internet. Interested about tech and communication. I initially started with PHP (2013). Joined as junior software developer and started developing web system using Yii framework. Not long after, I moved on to other projects and have been using Laravel for around 3 years since then  Mid 2015, I took another experience as front-end dev. Started with vue js, and moved to react after 1 year of using vue. Have been using react since then. Early 2017, there was a need to migrate PHP-backed system to Go, to increase efficiency and modularity (go's single binary) and that was the first project where I applied my Go knowledge. Recently, I've been doing personal project for a competition using python to predict the emotion of a stream of wav audio. To sum up, I like to tinker with technologies, and getting into the loop of learn, apply, repeat. Want some referrals?  vultr: https://www.vultr.com/?ref=7203686 digital ocean (get $10 in credit): https://m.do.co/c/2daa556e6f4e"
    },
    {
        "objectID": "/posts/a-night-with-kubernetes",
        "coverImage": "/images/kubernetes_logo-sm.png#featured",
        "date": "2018-03-21T15:13:40.000Z",
        "type": "POST",
        "title": "A Night with Kubernetes",
        "summary": "Kubernetes Logo. What is Kubernetes?  Dealing with lot of applications that are containerized (ie. via docker) and installed across regions can cause headache; from restarting containers, deploying to multiple nodes, scaling, etc. Kubernetes is a tool to help us deal with such situation by putting those containers in a cluster.",
        "body": "Kubernetes Cluster, Nodes, Deployments, and Pods  Knowing these four terms will help us understand how Kubernetes work. Cluster is basically a pool of machines, which at least one of it acts as a cluster master, and the other machines act as worker machines (slaves). As you may've guessed, master machine will manage the operation of its slaves. Node is a term used to address a worker machine in a cluster. Deployments refer to the applications we want to deploy or have deployed. Pod, the smallest unit in Kubernetes, is a group of one or more containers that makes up an application or service. You can think of pod as your logical host, or virtual machine. The overall logical view of a Kubernetes cluster would look like this:  ▾ Kubernetes Cluster   ▾ Master #1     ▾ Deployment \"app1\"       ▾ Node #1         ▾ Pod \"app1-2035384211\"           nginx           redis         Pod ... ▾ Deployment \"app2\"       ▾ Node #1         Pod \"app2-2035384224\"           [redacted]         Pod ... ▾ Deployment \"app3\"       ▾ Node #1         Pod \"app3-2035384277\"           [redacted]         ... ▾ Node #2         Pod \"app3-2035384122\"           [redacted]     ▾ Deployment \"app-xyz\"       ... ▾ Master #N     ...Figure 1: Logical view of typical Kubernetes cluster  As shown in above structure, it's a a Kubernetes cluster with single master. However, we still can add more master (master N). Our master #1 currently contains 3 deployments; app1, app2, and app3. In practice, you'd see those three apps as web server, cache, or your custom application. The app1 has been deployed to one node, Node #1. Each deployment will have a unique suffix in its pod name, just like app1-2035384211. Digging deeper into pod app1-2035384211, we know that it runs two containers; nginx and redis. For every pod we have in our Kubernetes cluster, we can execute command (bash, etc) in it using kubectl. Below command will run bash in nginx container of pod app1-2035384211:   kubectl exec -it app1-2035384211 --container nginx -- /bin/bash  Going to deployment app2, it shows that pod app2-2035384224 has been deployed to Node #1, which means that at this point, our Node #1 contains 2 deployments; app1 and app2. Deployment app3 is a bit different than the previous two deployments because it has been deployed to two nodes (Node #1 and Node #2). In other words, our app3 has been scaled into two instances, which spread into two nodes. Together with app3, our Node #1 now contains 3 deployments; app1, app2, and app3. Our Node #2 however, only contains single pod so far, which is app3-2035384122. Creating Kubernetes Cluster  To simulate the structure in figure 1, we'll create a Kubernetes Cluster of three machines. One machine for cluster master, and other two as nodes. Let's name these machines as vm1, vm2, and vm3 for this demonstration. Next, creating the cluster is quite straightforward:      1. Install kubernetes dependencies   taken from  https://zihao.meost/creating-a-kubernetes-cluster-from-scratch-with-kubeadm/   1. prepare new repos apt-get -y install apt-transport-https ca-certificates software-properties-common curl  2. add docker repo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - add-apt-repository \\        \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\        $(lsb_release -cs) \\        stable\"   3. add kubernetes repo curl -fsSL https:/ackages.cloud.google.com/apt/doc/apt-key.gpg | apt-key  add - add-apt-repository \\       \"deb https://apt.kubernetes.io/ \\       kubernetes-$(lsb_release -cs) \\       main\"  install dependencies apt-get update && apt-get install -y docker-ce kubelet kubeadm kubernetes-cni  If everything went well, the docker, kubectl, and kubeadm commands should be available in your machines. 2. Initialize vm1 as master  ssh to vm1 run kubeadm init  The kubeadm init command will output something like this:   kubeadm join --token token.abc.def {server_ip}:6443 --discovery-token-ca-cert-hash sha256:blabla  3. Make the other machines join the cluster  ssh to vm2 run the kubeadm join command from step 2 install container network interface (CNI)           using weave CNI for now, but you can try other choices     kubectl apply -f https://git.io/weave-kube-1.6      repeat for vm3  The two important parts to create Kubernetes cluster from above steps is that we did kubeadm init in vm1 to make it as cluster master, and then kubeadm join ... from other machines to join the cluster. Now that we've a cluster master and joined the other two machines to our cluster master, we can verify if it's reflected in our list nodes by executing this command in cluster master: kubectl get nodesFigure 2: Displaying Kubernetes nodes   If you forgot to install CNI in step 3, your node status will likely yield Pending instead of Ready  In figure 2, you must have noticed that before we run kubectl get nodes, we set an environment variable KUBECONFIG. This variable refers to the config file used by kubectl, which defaults to ~/.kube/config. However, we changed it since the we want the kubectl to interact with our cluster master, whose config is stored /etc/kubernetes/admin.conf (generated when we run kubeadm init command). Another approach if we don't want to change the KUBECONFIG is to pass a config file to kubectl's --kubeconfig arg, as follow:  kubectl get nodes --kubeconfig=/etc/kubernetes/admin.conf  Creating Deployment  You can create Kubernetes deployment using file or directly passing container's image url. For this demonstration, we'll create a deployment named app1 which simply is a hello-world-nginx app pulled from public docker hub at kitematic/hello-world-nginx. To do so, we just need to execute this command:  kubectl run app1 --image=kitematic/hello-world-nginx --port=80  Above command will create one deployment named app1 and one pod which name prefix is app1. The --port=80 argument indicates that we want to expose port 80 of the image. To verify if the deployment and pod exist, run this command:  kubectl get deployments kubectl get podsFigure 3: Listing Kubernetes deployments and pods  As shown in above image, we've successfully deployed our app1 and the pods is running in one of our node. To get more detailed info of our app1-ff7b44c5d-q8rxd pod (the node where the pod has been deployed, state, IP, restart count, etc.), run this command:  kubectl describe pods app1-ff7b44c5d-q8rxd   Exposing Deployments  Creating deployments will only create pods and assign it to internal IP of the cluster, which doesn't make the app accessible from outside vm; we can't access app1 from {ip-of-vm}:{port-of-app1}. To make the app publicly accessible, we'll need to expose our deployment. For this demonstration, we'll use the NodePort type which will bind our deployment port to vm's port:  kubectl expose deployment app1 --type=NodePort --port 80  Once app1 is exposed, we can verify by checking the list of ports have been bound to our vm (the Kubernetes Services), using kubectl get service:Figure 4: List of Kubernetes Services  We can see that port 80 of our app1 is bound to port 30485 (of our vm1), which means that the app1 is now publicly accessible from {ip-of-vm1}:30485. If the IP of your vm1 is 67.207.85.43, then you can access app1 from 67.207.85.43:30485. Closing  That's it! We've explored quite a lot of Kubernetes; the structure, nodes, deployments, and all the way down  to make the app accessible from internet. Of course, accessing your app from 67.207.85.43:30485 instead of 67.207.85.43 is not intuitive, which is why, in practice, we'd put another layer to handle it (ie. proxy, load balancer, or ingress). The next thing that you may want to explore is Kubernetes Dashboard, which enables us to control all Kubernetes things visually; deploying nodes, executing command in pods, deleting deployments, adjusting number of replicas, etc. Lastly, while this post is not meant to be an in-depth notes of Kubernetes, hopefully it gives you a better idea of what Kubernetes is and what is it capable of. Also, they've a very complete documentation, which is awesome! See it here: https://kubernetes.io/docs/home/  \"It turns out to be a long night of exploring Kubernetes\" 😆  Till next. See ya!  :https://zihao.meost/creating-a-kubernetes-cluster-from-scratch-with-kubeadm/ :https://github.com/containernetworking/cni :https://kubernetes.io/docs/concepts/services-networking/service/ :https://kubernetes.io/docs/concepts/services-networking/ingress/  {{ load-photoswipe }}",
        "tags": [
            "devops",
            "cloud"
        ]
    },
    {
        "objectID": "/posts/graphqlboiler-generator",
        "date": "2018-03-04T16:21:19.000Z",
        "type": "POST",
        "title": "GraphQL + SQLBoiler Generator",
        "summary": "This note as a continuation of my journey with Go template. Based on the knowledge of what template package can do, we'll generate a resolvers code from a given sqlboiler model struct to to satisfy graphql implementation of neelance/graphql-go.",
        "body": "Synopsis  I'm working on a project that uses MySQL as database, and wanted to have GraphQL implemented. To handle the database, we'll use SQLBoiler from volatiletech/sqlboiler (they've very good documentation!). As for the GraphQL, we'll use neelance/graphql-go. Now, the flow to implement the GraphQL is:  GraphQL endpoint starts with a root resolver, ie. RootResolver. A sample code would look like this:              // import graphql \"http://github.com/neelance/graphql-go\"          resolver := &RootResolver{}     var schema graphql.Schema = graphql.MustParseSchema(resolvers.Schema, resolver)      Every endpoint must have resolver. Assuming we want to create a graphql endpoint for user, then we'll have a User() method attached to RootResolver, that will return a userResolver Every endpoint resolver (ie. userResolver), will resolve every available fields. If a user has 3 fields name, email and username, userResolver must have 3 accompanying methods: Name(), Email(), and Username() Once userResolver is completed, update the graphql schema. We can represent the relationship of methods mentioned above like so: ▾ RootResolver     .User()     userResolver ▾ userResolver     .Name()     string     .Email()    string     .Username() string   Generator Approach  Looking at the relationships, it will be a repetitive work to hand-code all the resolvers for each model. Thus, we'll come with a generator approach, that will take a struct, generate those resolvers code based on the struct, and store the generated codes to files inside the directory we choose. The Code  // import \"github.com/wzulfikar/lab/go/graphqlboiler\"  type User struct {     Name      string     Email     string     Username  string }  resolversDir := \"ath-to-project/resolvers/\" graphqlboiler.Boil(graphqlboiler.Tpl{     RootResolver: \"RootResolver\",     Schema:       User{},     Repo:         \"gitlab.com/wzulfikar/iiumpayment\", }, resolversDir)  When above code is executed, the graphqlboiler.Boil will use Go's reflection ability from pkg/reflect to get the struct type, field names and field types. In this case, it will know that the struct's type name is User, and it has 3 fields; Name, Email and Username, which its types are all string. Using this information and common convention, the generator determines that the resolver name is userResolver, and proceeds with generating resolvers code for the User struct. Upon completion, there will be four new files stored in resolvers directory:   ▾ path-to-project/     ▾ resolvers/         user.go         user_mutations.go         user_result.go         user_schema.go  Above four files contains the necessary codes to run the graphql;  user.go     attach userResolver to RootResolver, and      attach methods for userResolver (Name(), Email() and Username()) user_mutations.go     attach mutation endpoint CreateUser() to RootResolver. user_result.go     Contains complimentary codes to add pagination for the query user_schema.go     the GraphQL schema os User, with exported variables  Using the generator, we've completed steps 1 to 3 of the flow presented in Synopsis. All the repetitive steps are done by generator. We can proceed directly to step 4: updating our graphql schema, which basically just putting the variables from user_schema.go to the schema that will be parsed into graphql.MustParseSchema(). Once the schema is updated, we can run the test and spin up our graphql server!  Closing  The templates used to generate above codes are available at wzulfikar/lab/graphqlboiler/templates. While the generator itself is by any mean not a sophisticated code, it has helped me in building GraphQL endpoint from the same scenario (a Go project with SQLBoiler and neelance/graphql-go). If you'd like to explore other graphql-go generator, you may want to see this: https://github.com/vektah/gqlgen. Lastly, the full code for the generator is available here: https://github.com/wzulfikar/lab/tree/master/go/graphqlboiler  Till next. See ya!",
        "tags": [
            "go",
            "sqlboiler",
            "graphql"
        ]
    },
    {
        "objectID": "/posts/hello-hugo",
        "coverImage": "/images/hugo-logo.png#featured",
        "date": "2018-03-02T18:33:20.000Z",
        "type": "POST",
        "title": "Hello Hugo!",
        "summary": "Another experiment on how/where I write things I like to write i(Duh)/i. So, I've been through the path of Wordpress, Tumblr, Ghost, and recently, Gitbook. Each has its own merits and drawbacks. However, I see something interesting from Hugo, that I didn't see in my previous adventures with other writing tools.",
        "body": "Before we go to Hugo, I'd like to clarify the context by telling more about what I've found in my previous writing tools, and what I'm looking for. Wordpress  Wordpress (https://wordpress.org) has been around since 2003 and can be seen as one of the most famous blogging tools, or CMS (Content Management System). And by being most famous, it means that people can find help and support easily. It has a good built-in visual editor and so many themes to choose from. Many things can be integrated using ready-made plugins (ie. google analytics, image gallery, e-commerce, etc.). Good things. To get started with Wordpress is not so much difficult. Most hosting providers have built-in Wordpress package. Technical wise, an online Wordpress instance will need a hosting, database (MySQL), and domain. Since Wordpress stores its contents (posts, settings, etc) in database, doing a full backup means having a copy of files in the hosting and data stored in database. I haven't really had a bad experience when using Wordpress. However, the visual editor seems too slow for me to work with, and an internet connection is required to access the editor. Well, I can just write somewhere and paste to Wordpress editor when I've internet connection, but I prefer not to. With that downside, I started to look for something else. Tumblr  In Tumblr, things seem to be less complicated than Wordpress. You don't need to have your own hosting or to install your own database. The editor is good, getting started is just about creating new account. Your posts are hosted in Tumblr at no cost. Actually, I kind of felt comfortable using Tumblr. Not so long after, I realize that I've to be connected (internet) to write. Besides that, using Tumblr means that I don't actually have full-control of my blog to customize. For those who like to customize their blog, they may not like it. Long story short, I started another search for writing tools.. Ghost  Ghost is a blogging platform released on 2013). What I like the most about Ghost is its clean, and user-friendly interface. Aside from that, it's actually an open source project (see: https://github.com/TryGhost/Ghost). To get started, you can install Ghost on your own server (self-host), or subscribe to their managed service: Ghost(Pro). In my case, I used self-host version of Ghost. Installation is not difficult, things went well as expected. You may want to note that Ghost is coded in Node.js (a programming language) that's not as common as PHP (used to build Wordpress) when it comes to shared hosting. Hence, installing Ghost may not be available in most shared web hosting providers. Overall, I don't really have a complain for Ghost. However, I actually still looking for something that I can put my writing offline, and post it later when I've internet connection. Also, I'd prefer to not put my contents in database, so it still can be seen anywhere. Gitbook  Gitbook is kind of interesting. It's a platform to write book and publish content online. It has an offline editor where you can start writing and post later. In Gitbook, your contents are stored as files, in your computer. There's no need for database. To get started with Gitbook, you can create an account there (https://gitbook.com) and download Gitbook Editor. Open your Gitbook Editor, sign in with your account, and you can start writing. Try to explore Gitbook features from online resources and you'll find some interesting stuffs, like the ability to download your contents as PDF or ePub. There's something off with Gitbook tho. It's meant for publishing book. While what I'm looking for is something to publish blog-like contents, which have time-related contents. With that reasoning, I feel like there must be a more suitable tool for this. Hello Hugo!   Hugo (http://gohugo.io) takes different approach compared to other tools we've discussed. It's a static site generator, something like Jekyll. Static site generator basically means that Hugo will takes your contents and build a static site from it. Since it's static, you can host your site at no cost in platforms like GitHub, Gitlab, Netlify, surge.sh, etc. Since we mentioned Jekyll, how does Hugo differ from Jekyll?   Jekyll is built using Ruby (a programming language), which means that you'll need Ruby in your machine to use Jekyll. Yep, it's something techy. Hugo is built using Go (another programming language) that can produce a binary for multiple platform. People who developed Hugo have published it as a binary (a self executable program) that anyone can download. Hence, to use Hugo, one doesn't need to have Go programming language installed in their machine. They just need to have the Hugo binary. See more: Hugo Quick Start. Hugo released its v0.16 – the first Hugo release that wasn't tagged as pre-release, on June 2016. With Hugo, all my contents are stored as files (markdown files, to be specific). There's no need for database. I can write my contents offline and publish it later. I can see my files anywhere, and I can use any editor I like (VIM, VSCode, SublimeText, etc). If you wonder what markdown is, it's a form of formatting similar to how you format message in Whatsapp. Try writing markdown yourself here: http://markdownlivepreview.com. While I personally convinced to use Hugo (this blog itself is built using Hugo), it might not be for everyone since it involves some techy steps in its flow of writing contents. Nevertheless, I hope that knowing Hugo can somehow benefits you. Yup, you've reached the end of this post! And to end this, there's also a good writing platform that you may want to check out: Medium. Till next. See ya!The Go gopher: an iconic mascot of Go project. {{ load-photoswipe }}",
        "tags": [
            "experiment",
            "go"
        ]
    },
    {
        "objectID": "/posts/iium-producation-2018",
        "date": "2018-03-27T12:00:34.000Z",
        "type": "POST",
        "title": "PPI-IIUM Producation 2018: Finding Passion in University",
        "summary": "Earlier this week, I received an invitation from Persatuan Pelajar Indonesia (PPI) –– an Indonesian Students Society at my campus (IIUM, Malaysia), to become a speaker of a sharing session event titled \"Producation\". The event will be held at IIUM this coming Friday, March 30.",
        "body": "The name \"Producation\" is an acronym for \"Professional Education\". In a nutshell, it's a sharing session to help improve participants' understanding of professionalism. There will be four speakers for the event, each with different topic to share. The topic I'll be sharing is titled \"Finding Passion in University\". That's it, finding your passion, while you're in university –– of course, it's not about whether you're passionate with the university itself. While waiting for the day of the event to come, I kind of thinking to prepare the things that I'd like to share by drafting it here and publishing it after the event. There'll be only 15 minutes slot for each session; wouldn't be nice if I missed a thing to share just because I didn't prepare. I'm not calling myself professional, but I've around 5 years experience working with professionals –– mostly in IT companies, and I'd like to share what I've learnt from them. If you're interested to the Google Slides used during the event (sharing session), you can find it at the end of this post. 1. Skolafund  Skolafund (https://skolafund.com) is a crowdfunding education focused on higher education. Think of it as kickstarter, gofundme, or launchgood, but for funding university tuition fee, research project, and other education-related. It started in 2015, four of us, and we were all still studying in our university –– two of us at National University of Singapore (NUS) and the other two (me and my friend) at International Islamic University Malaysia (IIUM). I've learnt a lot from my team. Importance of communication, commitment, etc. But what I'd like to share is what we've found and see as common students' problem: communication. Since we deal with the students on daily basis (ie. vetting campaigns, answering queries, etc.) , we'd be credible enough to share a thing or two on this matter. Common Problem: Communication  We can agree that a good intention, can be misinterpreted just because it's not well-communicated (hence the term, miscommunication). At Skolafund, we've found so many students with appealing stories for their campaigns, with the purest of intentions, but not well-communicated. In this case, the writing communication. Put aside the logical flow of the writing and let's get to the more obvious part: grammar. A campaign story might be appealing, but having too many grammatical errors will make the readers think that the campaign was not seriously created. And that can hurt Skolafund's professional pride. We created the platform so people who want to donate can donate peacefully, without thinking whether the campaign is a scam or not. Thus, having low quality campaigns is not an option. It will simply hurt us. 2. Learning Process: The Loop  We've related the term \"professionalism\" in point 1: Skolafund. The word \"professionalism\" itself gives us cue that it must be related to profession. Reflecting on those times I've worked at Skolafund, and other times working with other people, I realized that there are still more to learn, which has changed my perspective on how I see teaching and learning activity in classroom. Prior to this, I used to come to class, listen to the lecture, and I'll get what I get, no complaints. Nothing to lose, because I didn't have anything to look for at the first place. Things changed: the more I worked with those people, the more I know that there are still a lot of things to learn. During the works, I'll put in mind the things that I doubted or simply didn't know. Those things, those questions I've in mind, I'd bring it to class and ask it to the lecturer. Now, I've better motive to come to class. I know what I'm looking for, because I took time to find what is it that I'm looking for. I've something to lose if I didn't took the correct subject. I've created a loop that will keep me driven: learn - work - learn. And more importantly, I've found what I think as the joy of learning. That is, when you know what you want to look for, fight your way to find it, and you finally find it. You know, those \"aha\" moments. 3. Relate Yourself  To me, university life is one of those places where you can easily relate things to yourself. With the variety of subjects we take, assignments we have, places we visit, activities we join, etc., it's almost unlikely that we can't find anything related to ourselves. In university, anyone can try to become a good or bad listener through lectures. A student can explore what it takes to do a research by joining research group. People can assess if they've what it takes to be a team-player by doing group activities. Stimulate yourself with activities you've in university. If you're trying to find what's your passion, or what you relate to; udon't just do it, bring your consciousness, and get enlightened/u. 4. Bonus  I like to think of writing as an easy way to discover our passion. Choose one topic that you like to write. Start writing. Don't bother with the end result of your writing. If you find yourself indulged and pleased during the process of writing that particular topic, then probably that topic is what you're passionate about. Still related to writing, there's this website that provide examples and templates to help you start writing. Check the website and see for youself: writewellapp.com. Lastly, while not everyone is a fan of writing in computer (typing), having ability to type fast can be extremely helpful in today's world, where most things are digitalized. For this, you can check typing.com, a fun website for you to practice on your fast-typing skill. Closing  Not everyone in university study what he/she genuinely want to study. Some became doctors because they want to please their parents, some took certain course because that's the course offered by the scholarship, etc. Nothing's wrong with that. But when someone does it out of thought that there's no other option, that's the problem. We can't control what could happen to us at the moment, but we can control how we react. Take a time for yourself, read your current situation and use it for your benefit: find what you can relate to yourself. Once you've your findings, go for it. If you find yourself fighting for it, that is, you might have found your passion. src=\"https://docs.google.comresentation/d/e/2PACX-1vT7biNAKKUWk1EpFNFZsE-8Xd41iuZqOkY0uYUSeLYawhbxPAefWDjRC9OQvjucVerHCvPYE2BShpzq/embed?start=false&loop=false&delayms=3000\" frameborder=\"0\" width=\"100%\" height=\"350\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"/  br/ Till next. See ya!",
        "tags": [
            "xp",
            "reflection"
        ]
    },
    {
        "objectID": "/posts/my-take-on-go-template",
        "date": "2018-03-04T12:23:44.000Z",
        "type": "POST",
        "title": "My Take on Go Template",
        "summary": "In programming, string interpolation is common. Using ES6 (JavaScript), string interpolation can be done like this:",
        "body": "const name = \"Yondu\" let greeting = Hi ${name}! console.log(greeting) // yields \"Hi Yondu!\"  In Go, above code is similar to:  // #1 approach: using + name := \"Yondu\" greeting := \"Hi \" + name + \"!\" fmt.Println(greeting)  // #2 approach: using fmt.Sprintf name := \"Yondu\" greeting := fmt.Sprintf(\"Hi %s!\", name) fmt.Println(greeting)  You may have noticed that we didn't use ${...} in Go. It's simply because that's not how we do it in Go. However, sometimes we want to interpolate more stuffs. Something like:  Hello world! I'm {{ name }}. I'm {{ age }} years old! Nice to meet you!  When we see above text, we may have thought of the word \"template\", because it has a placeholder-like formatting (the use of {{ }}). Go provides a built-in package, text/template and html/template, to deal with this template related operations. Enter: Go Template     Let's start with a sample code:  // import \"text/template\"  // create template string tplString := ` Hello world! I'm {{ .Name }}. I'm {{ .Age }} years old! Nice to meet you :D `  // initialize the template tmpl, _ := template.New(\"template_name\").Parse(tplString)  // create the data to pass to template data := struct {     Name,      Age string     }{     \"Yondu\",     \"110\",     }  // execute the template var tpl bytes.Buffer _ = tmpl.Execute(&tpl, data)  // Get string representation of our template and print it fmt.Println(tpl.String()) Run in Go Playground  You may notice that in above code, we used {{ }} in tplString. In Go template, the {{ }} is used to execute Actions. An action can mean a data evaluation or control structures. In our code, it's a data evaluation: printing variable. You should also notice the use of dot (.), which is how we access a variable in Go template. In real life, you may want to separate template to its own files. For example, this is how your folder may look like:  ▾ mypackage/     ▾ templates/         nav.tpl         footer.tpl         sidebar.tpl  And the content of those .tpl files is something like:  // nav.tpl package templates  Nav := ` This is my navigation template. {{ .Link.Home }} {{ .Link.About }} {{ .Link.Login }} `  Using this approach – separating template files, it will be easier to edit the template and to use it. In our nav.tpl example above, the template string is stored in an exported variable Nav. An exported variable is a variable that can be accessed from other of the package. Exporting variable is easy: make its first letter uppercase (same goes to functions). In this case, we can access Nav from other package using templates.Nav like so:  // main.go  import \"mypackage/templates\"  tmpl, _ := template.New(\"nav\").Parse(templates.Nav)✽ ✽ ✽   So far, we've only used a template string from variable. Can we just pass a file and treat it as a template? Yup! You can use .ParseFiles:  data := ... tmpl, _ := template.New(\"my-template\").ParseFiles(\"my-template-file.txt\")  var tpl bytes.Buffer _ = tmpl.Execute(&tpl, data)  fmt.Println(tpl.String())  However, you may want to note that when passing a file as argument like in above ParseFiles() code, you should consider passing exact path. While passing relative path still works, it will be changed according to where the binary is run. So, be careful!   Closing  It's interesting that Go provides a built-in package to handle template. Now, you can go wild and explore more about Go template (maybe, start with the difference between text/template and html/template). Have a good journey, stay safe, and don't get lost!  Till next. See ya!",
        "tags": [
            "go"
        ]
    },
    {
        "objectID": "/posts/steal-like-an-artist",
        "coverImage": "/images/steal-like-an-artist-kindle-store.jpg",
        "date": "2018-07-15T08:18:42.000Z",
        "type": "POST",
        "title": "Steal Like an Artist",
        "summary": "I was visiting a library in my block this morning, and stumbled upon a book authored by Austin Kleon in 2012, titled \"Steal Like an Artist\" (you can find it online in Amazon, Book Depository, etc.). Upon skimming few of its pages, I already felt like I want to finish the book soon.",
        "body": "It's a good book, with a lot of takeaways that I can relate. Started reading it at 8.50am, finished the reading at 9.45am, and reading it again at 15.00. This post contains the things I read from the book, that I want myself to relate/reflect back, anytime in the future. All credits goes back to the author –– thanks for writing the book!  \"Wondering. Wandering.\" \"There's nothing new under the sun.\" As the French writer Andre Gide put it, \"Everything that needs to be said has already been said. But, since no one was listening, everything must be said again\" \"Here's a trick they teach you in art school. Draw two parallel lines on a piece of paper. How many lines are there? There's the first line, but then there's a line of negative space that runs between them. See it? 1 + 1 = 3\" A good example is genetics. You have a mother and you have a father. You posses features from both of them, but the sum of you is bigger than their parts. You're a remix of your mom, and dad, and all of your ancestors. \"We were kids without fathers. So we found our fathers on wax and on the streets and in history. We got to pick and choose the ancestors who would inspire the world we were going to make for ourselves\" – Jay Z The artist is a collector, not a hoarder. Hoarders collect indiscriminately, artist collect selectively; they only collect things that they really love. The great thing about dead or remote masters is that they can't refuse you as an apprentice. You can learn whatever you want from them. \"Seeing yourself as part of a creative lineage will help you feel less alone as you start making your own stuff. I hang pictures of my favorite artists in my studio\" \"School is one thing. Education is another. The two don't always overlap. Whether you're in school or not, it's always your job to get yourself an education\" 10. You have to be curious about the world in which you live. Look things up. Chase down every reference. 11. \"Don't ask question before you Google it. You'll either find the answer, or you'll come up with a better question.\" 12. \"Whether I went to school or not, I would always study.\" – RZA 13. Don't worry about doing research. Just search. 14. \"It's better to take what does not belong to you than to let it lie around neglected.\" – Mark Twain (I don't really agree with this, but a point is taken) 15. \"Guess what: None of us do. Ask anybody doing truly creative work, and they'll tell you the truth: they don't know where the good stuff comes from. They just show up to do their thing. Every day.\" 16. \"Nobody is born with a style or a voice. We learn by copying.\" 17. \"We're talking about practice here, not plagiarism –– plagiarism is trying to pass someone else's work as your own. Copying is about reverse-engineering.\" 18. \"A wonderful flaw about human beings is that we're incapable of making perfect copies. Our failure to copy our heroes is where we discover where our own thing lives.\" 19. As Salvador Dali said, \"Those who do not want to imitate, produce nothing.\" 20. \"If you have one person you're influenced by, everyone will say you're the next whoever. But if you rip off a hundred people, everyone will say you're so original!\" 21. \"What to copy is a little bit trickier. Don't just steal the style, steal the thinking behind the style.\" 22. \"If you just mimic the surface of somebody's work without understanding where they're coming from, your work will never be anything more than a knockoff.\" 23. \"I have stolen all of these moves from all these great players. I just try to do them proud, the guys who came before, because I learned so much from them.\" – Kobe Bryant 24. In O'Brien's words, \"It's our failure to become our perceived ideal that ultimately defines us and makes us unique.\" Thank goodness. 25. \"In the end, merely imitating your heroes is not flattering them. Transforming their work into something of your own is how you flatter them. Adding something to the world that only you can add.\" 26. \"When we love a piece of work, we're desperate for more. We crave sequels. Why not channel that desire into something productive?\" 27. The manifesto is this: Draw the art you want to see, start the business you want to run, play the music you want to hear, write the books you want to read, build the products you want to use –– do the work you want to see done. 28. \"Work that only comes from the head isn't any good. You need to find a way to bring your body into your work. Our nerves aren't a one-way street –– our bodies can tell our brains as much as our brain tells our bodies. You know that phrase, \"going through the motions\"? The motion kickstarts our brain into thinking.\" 29. \"The computer is really good for editing your ideas, and it's really good for getting your ideas ready for publishing out into the world, but it's not really good for generating ideas. There are too many opportunities to hit the delete key. The computer brings out the uptight perfectionist in us –– we start editing ideas before we have them.\" 30. \"Because once the computer is involved, \"things are on an inevitable path to being finished.\" Whereas in my sketchbook, the possibilities are endless.\" – Tom Gauld (cartoonist) 31. \"Once you start getting your ideas, then you can move over to your digital station and use the computer to help you execute and publish them.\" 32. \"The work you do while you procrastinate is probably the work you should be doing for the rest of your life\" – Jessica Hische 33. \"I think it's good to have a lot of projects going at once so you can bounce between them\" 34. \"Practice productive procrastination\" 35. \"I love ironing my shirts –– it's so boring, I almost always get good ideas.\" 36. Take time to mess around. Get lost. Wander. You never know where it's going to lead you. As the artist Maira Kalman says, \"Avoiding work is the way to focus my mind.\" 37. You can't connect the dots looking forward, you can only connect them looking backwards – Steve Jobs 38. \"Don't worry about unity from piece to piece. What unifies all of your work is the fact that you made it.\" 39. Tomlinson suggests that if you love different things, you just keep spending time with them. \"Let them talk to each other. Something will begin to happen.\" 40. \"The classroom is wonderful, if artificial, place: Your professor gets paid to pay attention to your ideas, and your classmates are paying to pay attention to your ideas. Never again in your life will you have such a captive audience.\" Soon after, you'll learn that most of the world doesn't necessarily care about what you think. As the writer Steven Pressfield says, \"It's not that people are mean or cruel, they're just busy.\" 41. In the beginning, obscurity is good. When you're unknown, there's nothing to distract you from getting better. No public image to manage. You'll never get that freedom back again once people start paying you attention, and especially not once they start paying you money. Enjoy obscurity while it lasts. 42. The more open you're about sharing your passions, the closer people will feel to your work. When you open up your process and invite people, you learn. 43. \"You don't put yourself online only because you've something to say –– you can put yourself online to find something to say.\" 44. \"If you're worried about giving your secrets away, you can share your dots without connecting them. It's your finger that has to hit the publish button.\" 45. \"All you need is a little space, and a little time; a little self-imposed solitude, and temporary captivity\" 46. Leave home; \"Distance and difference are the secret tonic of creativity. When we get home, home is still the same. But something in our mind has been changed, and that changes everything.\" – Jonah Lehrer 47. Your brain gets too comfortable in your everyday surroundings. You need to make it uncomfortable. Travel makes the world look new, and when the world looks new, our brains work harder. 48. It helps to live around interesting people, and not necessarily people who do what you do. 49. \"Be nice. The world is a small town.\" 50. \"The only mofos in my circle are people that I can learn from\" – Questlove 51. \"You'll need: curiosity, kindness, stamina, and a willingness to look stupid.\" 52. \"If you ever find that you're the most talented person in the room, you need to find another room.\" 53. \"Quit picking fights and go make something.\", \"Complain about the way other people make software by making software\" – Andre Torrez 54. \"The best way to get approval is to not need it\" 55. Validation is for parking. \"Modern art = I could do that + yeah, but you didn't.\" – Craig Damrauer 56. \"So, get comfortable with being misunderstood, disparaged, or ignored. The trick is to be too busy doing your work to care.\" 57. \"Instead of keeping a rejection file, keep a praise file. Use it sparingly –– don't get lost in past glory –– but keep it around for when you need the lift.\" 58. \"It's better to burn out than to fade away\" – Neil Young 59. \"Be boring. It's the only way to get things done.\" 60. \"Be regular and orderly in your life, so that you may be violent and original in your work\" – Gustave Flaubert 61. \"The art of holding money is all about saying no to consumer culture. Saying no to takeout, $4 lattes, and that shiny new computer when the old one still works fine.\" 62. Keep your day job. A day job gives you money, a connection to the world, and a routine. Freedom from financial stress also means freedom in your art. As photographer Bill Cunningham says, \"If you don't take money, they can't tell you what to do.\" The worst thing a day job does is take time away from you. 63. \"What you'll probably find is that corollary to Parkinson's Law is usually true: Work gets done in the time available\" 64. \"The trick is to find a day job that pays decently, doesn't make you want to vomit, and leaves you with enough energy to make things in your spare time. Good day jobs aren't necessarily easy to find, but they're out there.\" 65. A calendar helps you plan work, gives you concrete goals, and keep you on track. \"Get a calendar. Fill the boxes. Don't break the chain.\" 66. \"In this ages of information abundance and overload, those who get ahead will be the folks who figure out what to leave out, so they can concentrate on what's really important to them. Nothing is more paralyzing than the idea of limitless possibilities. The idea that you can do anything is absolutely terrifying.\" 67. \"It seems contradictory, but when it comes to creative work, limitations means freedom.\" Make things with the time, space, and materials you have, right now. 68. \"The right constraints can lead to your very best work.\" 69. \"Telling yourself you have all the time in the world, all the money in the world, all the colors in the palette, anything you want –– that just kills creativity.\" – Jack White 70. \"There are definite dangers in thinking you can do everything. Whittle down the stream so you can think. Do with less. Start now.\" 71. What makes us interesting isn't just what we've experienced, but also what we haven't experienced. Embrace limitations. Keep moving. 72. \"In the end, creativity isn't just the things we choose to put in, it's the things we choose to leave out.\" –– choose wisely. and have fun. 73. \"Make things for people you love. For people you want to meet.\" 74. \"Your parents invent you, and you take it from there.\" 75. \"Some advice can be a vice. Feel free to take what you can use and leave the rest.\"  {{ load-photoswipe }}",
        "tags": [
            "reflection"
        ]
    },
    {
        "objectID": "/posts/using-bettercap-proxy",
        "coverImage": "/images/bettercap/bettercap-logo-sm.png#featured",
        "date": "2018-03-23T18:10:11.000Z",
        "type": "POST",
        "title": "Using Bettercap (v2.0) Proxy",
        "summary": "What is Bettercap?  If you are into networking tools for ARP spoof, sniffing, and other MITM-like utilities, you've probably heard about ettercap. Bettercap, which sounds similar to ettercap, is a networking tool like ettercap. Some people like to relate the name \"Bettercap\" as better ettercap.",
        "body": "Quoting from its github repository at https://github.com/bettercap/bettercap, it's \"The state of the art network attack and monitoring framework\". Why Bettercap?  This is where I find it interesting. The first time I knew about Bettercap was when it still built using ruby (v1.0). In Feb 2018, Bettercap author, Simon Margeritelly (@evilsocket), reimplemented Bettercap (v2.0) using Go. With this reimplementation, Bettercap is now a cross-platform single binary program. Unlike its previous version where you've to install ruby to run it, in Bettercap v2.0, you just need to download the binary and you're all set! 😎  Using Bettercap: HTTP Proxy  Now that we know how easy is it to install Bettercap, let's go ahead and try one of its feature: HTTP proxy. Bettercap has built-in feature to create HTTP proxy and use javascript file to interact with the connection. To demonstrate this functionality, we'll:  Run Bettercap on local machine Set proxy and js file to change server response Test if the proxy is working using curl  The first step, running Bettercap in local machine (I'm using macOS in this case), is pretty straightforward. Download the binary for your OS, and run it from your command line: path/to/bettercap. An interactive Bettercap session will appear, something like this:Figure 1: initializing bettercap (command line)  Going to step 2, we'll need to set a proxy and create a js file to interact with proxied connection. Before activating the proxy, let's create a proxy-script.js file in our desktop:  // file: ~/desktoproxy-script.js  // called when script is loaded function onLoad() {     console.log( \"PROXY SCRIPT LOADED\" ); }  // called after a request is proxied and there's a response function onResponse(req, res) {     res.ContentType = \"rogue-content\";     res.Body = \"me was here\"; }Figure 2: js code inside desktoproxy-script.js  Now that the proxy-script is in place, we can bring up the HTTP proxy by running this command (in bettercap session):Figure 3: activating bettercap http.proxy module  In above image, you should've noticed that the interpreter displayed PROXY SCRIPT LOADED after loading the proxy script. Yep, that specific string PROXY SCRIPT LOADED is the one we set inside our console.log of onLoad() function in proxy-script.js (see: figure 2). The set http.proxy.script tells Bettercap where to look for our js file. set http.proxy.address sets which address we'd like to bind the Bettercap proxy. Lastly, when all the variables for http.proxy are set, we activate the module using http.proxy on. We're reaching our last step, step 3!   We've successfully activated http.proxy module. If you've issue activating it, try run the bettercap command as administrator (or via sudo). In this step, we'll test if our proxy is actually working by sending a request using curl command. If you're on windows and you don't have curl installed, you can download it from here: https://curl.haxx.se/download.html. Based on our code in proxy-script.js file, the respond we should get when sending request using proxy is me was here (see onResponse function, figure 2). To test that, we'll first send a direct request to google to see what's the original respond, and then we'll send another request to google using proxy. The GIF in Figure 4 below shows how it works:Figure 4: Bettercap proxy in action  Voila! The proxy is working, and sending request to google.com (and to any other domain) via our proxy will get the respond modified to me was here. Notice that when we send the proxied request, our bettercap session displays new event stream http.proxy.spoofed-response. To sum up above operation, here's the logical flow:   → user sends request with bettercap proxy    → bettercap proxy handle the request and modify it      → user gets modified respond    Closing  That's it, a short demonstration on how we utilize Bettercap HTTP proxy module to interact with proxied connection and modify the response. In real world scenario, above operation can be used by any attacker to smuggle malicious script in HTTP response –– and the user will still think that nothing has changed, instead of changing the whole response to me was here. Knowing how easy to do this should give us more awareness when using random proxy in internet. Just like what we've demonstrated here, yeah, the proxy providers can easily do funky stuffs as we browse the internet. Unless you really trust, don't use them to browse your confidential informations. I'd like to write one or two more posts to demonstrate other Bettercap features. But in the meantime, take your time exploring Bettercap wiki and see for yourself what it's capable of. Till next. See ya!  :https://en.wikipedia.org/wiki/Ettercap_(software) :https://www.evilsocket.net/2018/02/27/All-hail-bettercap-2-0-one-tool-to-rule-them-all/ :https://github.com/bettercap/bettercap/releases",
        "tags": [
            "intro",
            "networking"
        ]
    }
]